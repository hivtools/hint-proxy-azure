daemon off;
master_process off;
worker_processes  1;
error_log stderr warn;
pid /usr/local/openresty/nginx/logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /usr/local/openresty/nginx/conf/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  stderr main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # this sets the maximum size information to be unlimited; it might
    # be better to set this to apply only to authenticated endpoints
    # (once people are authenticated I think we can allow them to send
    # things of unlimited size).
    client_max_body_size 0;

    # Main server configuration. See below for redirects.
    server {
        listen       ${HTTP_PORT};
        server_name  localhost  ${HTTP_HOST};

        # Enable HTTP Strict Transport Security (HSTS)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # https://scotthelme.co.uk/content-security-policy-an-introduction/
        # https://content-security-policy.com/examples/nginx/

        # add_header Content-Security-Policy "default-src 'self';" always;
        # However, this one does work:
        #add_header Content-Security-Policy "frame-ancestors 'self' *.imperial.ac.uk *.ic.ac.uk" always;

        # https://scotthelme.co.uk/hardening-your-http-response-headers/#x-frame-options
        # https://geekflare.com/add-x-frame-options-nginx/
        add_header X-Frame-Options "SAMEORIGIN";

        # https://scotthelme.co.uk/hardening-your-http-response-headers/#x-content-type-options
        add_header X-Content-Type-Options "nosniff" always;

        # https://scotthelme.co.uk/a-new-security-header-referrer-policy/
        add_header Referrer-Policy 'origin' always;

        # https://scotthelme.co.uk/goodbye-feature-policy-and-hello-permissions-policy/
        # Actual values adopted from securityheaders.com :)
        add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=(), interest-cohort=()" always;

        root /usr/local/openresty/nginx/html;

        location / {
            proxy_pass http://${HINT_NAME}/;
            proxy_http_version 1.1;
            proxy_read_timeout 120s;
            proxy_connect_timeout 75s;
        }

        location /hintr {
            access_by_lua_block {
                local auth_header = ngx.req.get_headers()["Authorization"]
                if not auth_header then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.header.content_type = "text/plain"
                    ngx.say("Error: Authorization header is missing")
                    return ngx.exit(ngx.HTTP_BAD_REQUEST)
                end

                local handle = io.popen("check-team-membership 11425181 '" .. auth_header .. "'")
                local result = handle:read("*a")
                local success, exit_type, exit_code = handle:close()

                if success and exit_code == 0 then
                    -- Authorized, continue to proxy
                    return
                else
                    -- Return 401 Unauthorized
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.header.content_type = "text/plain"
                    ngx.say("Unauthorized: Authorization token invalid or user is NOT a member of the 'naomi-debug' GitHub team.")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
            }
            rewrite /hintr/(.*) /$1 break;
            proxy_pass http://${HINTR_NAME};
            proxy_http_version 1.1;
        }

        location /queue-length {
            default_type 'text/plain';
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                -- Configure connection timeouts
                red:set_timeouts(1000, 1000, 1000) -- connect, send, read timeouts in ms

                -- Connect to Redis
                local ok, err = red:connect("$REDIS_NAME"), tonumber("$REDIS_PORT"))
                if not ok then
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say("Failed to connect to Redis: ", err)
                    return
                end

                -- Get queue length
                local len, err = red:llen("$REDIS_QUEUE_NAME"))
                if not len then
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say("Failed to get queue length: ", err)
                    return
                end

                -- Put connection back into connection pool
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to set keepalive: ", err)
                end

                -- Return the length
                ngx.say(len)
            }
        }

        location /news {
            proxy_pass https://reside-ic.github.io/naomi-news;
            proxy_http_version 1.1;
        }
    }

    # Redirect all http requests to the SSL endpoint and the correct domain name
    server {
        listen ${HTTP_PORT} default_server;
        listen [::]:${HTTP_PORT} default_server;
        server_name _;

        location / {
            return 301 https://${HTTP_HOST}:${HTTPS_PORT}$request_uri;
        }
    }
}
